function isFloatNumber(a) {
    return (!isNaN(a));
}
function getUniqueId() {
    var a = new Date;
    return a.getTime();
}
function formatLatlng(e, d) {
    if (!isFloatNumber(e)) {
        return;
    }
    var c = parseInt(e),
    a = parseInt((parseFloat(e) - parseInt(c)) * 60),
    b = ((parseFloat(e) - parseInt(c)) * 60 - parseInt(a)) * 60;
    c = Math.abs(c);
    a = Math.abs(a);
    b = Math.abs(b).toFixed(2);
    if (a.toString().length === 1) {
        a = "0" + a.toString();
    }
    if (b.toString().length === 1) {
        b = "0" + b.toString();
    }
    var g = "";
    if (d === 0) {
        if (e > 0) {
            g = " 北 ";
        } else {
            g = " 南 ";
        }
    } else {
        if (e > 0) {
            g = " 东 ";
        } else {
            g = " 西 ";
        }
    }
    return (c + "°" + a + "′" + b + "″" + g);
}
function getRandom(a) {
    return Math.floor(Math.random() * a);
}
function formatNumber(e) {
    var c = parseInt(e).toString(),
    a = c.length;
    if (a <= 3) {
        return c;
    }
    var d = a % 3;
    return d > 0 ? c.slice(0, d) + "," + c.slice(d, a).match(/\d{3}/g).join(",") : c.slice(d, a).match(/\d{3}/g).join(",");
}
function tileXYToQuadKey(e, d) {
    var b = new StringBuilder(),
    c,
    f,
    a;
    for (c = d; c > 0; c--) {
        f = "0";
        a = 1 << (c - 1);
        if ((e.x & a) != 0) {
            f++;
        }
        if ((e.y & a) != 0) {
            f++;
            f++;
        }
        b.append(f);
    }
    return b.toString();
}
function quadKeyToTileXY(b, e, d) {
    e.x = e.y = 0;
    d = b.length;
    var c, a;
    for (c = d; c > 0; c--) {
        a = 1 << (c - 1);
        switch (b[d - c]) {
            case "0":
                break;
            case "1":
                e.x |= a;
                break;
            case "2":
                e.y |= a;
                break;
            case "3":
                e.x |= a;
                e.y |= a;
                break;
        }
    }
}
function TileToQuadKey(b, g, f) {
    var d = "";
    for (var e = f; e > 0; e--) {
        var c = 1 << (e - 1);
        var a = 0;
        if ((b & c) != 0) {
            a++;
        }
        if ((g & c) != 0) {
            a += 2;
        }
        d += a;
    }
    return d;
}
function tileTolng(b, d) {
    var c = (b / Math.pow(2, d) * 360 - 180);
    var a = c.toString().split(".");
    if ((a[1]) && (a[1].length > 4)) {
        return c.toFixed(4);
    } else {
        return c;
    }
}
function tileTolat(e, c) {
    var d = Math.PI - 2 * Math.PI * e / Math.pow(2, c);
    var b = (180 / Math.PI * Math.atan(0.5 * (Math.exp(d) - Math.exp(-d))));
    var a = b.toString().split(".");
    if ((a[1]) && (a[1].length > 4)) {
        return b.toFixed(4);
    } else {
        return b;
    }
}
function numberInbound(c, b, a) {
    return (c >= b) && (c <= a);
}
function getIconUrl(e) {
    var d = false;
    var c = [1, 46, 91, 136, 181, 226, 271, 316];
    var a = [45, 90, 135, 180, 225, 270, 315, 360];
    for (var b = c.length - 1; b >= 0; b--) {
        if (numberInbound(e, c[b], a[b])) {
            e = a[b];
            d = true;
            break;
        }
    }
    if (!d) {
        e = a[0];
    }
    return "mapfiles/markers2/d_" + e + ".png";
}
function getDirectionStr(g) {
    var f = false;
    var d = "";
    var e = [0, 23, 68, 113, 158, 203, 248, 293, 338];
    var b = [22, 67, 112, 157, 202, 247, 292, 337, 360];
    var a = [121, 122, 123, 124, 125, 126, 127, 128, 121];
    var h = ["正北", "东北", "正东", "东南", "正南", "西南", "正西", "西北", "正北"];
    for (var c = e.length - 1; c >= 0; c--) {
        if (numberInbound(g, e[c], b[c])) {
            d = h[c];
            f = true;
            break;
        }
    }
    if (!f) {
        d = h[0];
    }
    return d;
}
function formatCalculateResult(b, a) {
    if (a) {
        unit = " m²";
        if (b > 1000000) {
            unit = " km²";
            b = parseFloat(b / 1000000).toFixed(2);
            if (b > 10) {
                b = Math.floor(b);
            }
        } else {
            b = parseFloat(b).toFixed(2);
            if (b > 10) {
                b = Math.floor(b);
            }
        }
        b = (mtd.showAreaLabel) ? ("面积=" + b + unit) : "";
    } else {
        unit = " m";
        if (b > 1000) {
            unit = " km";
            b = (b / 1000).toFixed(2);
            if (b > 10) {
                b = Math.floor(b);
            }
        }
        b = "总长度=" + b + unit;
    }
    return b;
}
function lonlat2mercator(c) {
    var b = {
        x: 0,
        y: 0
    };
    var a = c.x * 20037508.34 / 180;
    var d = Math.log(Math.tan((90 + c.y) * Math.PI / 360)) / (Math.PI / 180);
    d = d * 20037508.34 / 180;
    b.x = a;
    b.y = d;
    return b;
}
function mercator2lonlat(b) {
    var c = {
        x: 0,
        y: 0
    };
    var a = b.x / 20037508.34 * 180;
    var d = b.y / 20037508.34 * 180;
    d = 180 / Math.PI * (2 * Math.atan(Math.exp(d * Math.PI / 180)) - Math.PI / 2);
    c.x = a;
    c.y = d;
    return c;
}
function tile2long(a, b) {
    return (a / Math.pow(2, b) * 360 - 180);
}
function tile2lat(c, a) {
    var b = Math.PI - 2 * Math.PI * c / Math.pow(2, a);
    return (180 / Math.PI * Math.atan(0.5 * (Math.exp(b) - Math.exp(-b))));
}
function long2tile(b, a) {
    return (Math.floor((b + 180) / 360 * Math.pow(2, a)));
}
function lat2tile(b, a) {
    return (Math.floor((1 - Math.log(Math.tan(b * Math.PI / 180) + 1 / Math.cos(b * Math.PI / 180)) / Math.PI) / 2 * Math.pow(2, a)));
}
function tileToMercatorBounds(d, c) {
    var e = "",
    b = d.x,
    g = d.y,
    f = 20037508.34279,
    a = Math.pow(2, c),
    e = 2 * f * b / a - f;
    e += "," + (-2 * f * (g + 1) / a + f);
    e += "," + (2 * f * (b + 1) / a - f);
    e += "," + (-2 * f * g / a + f);
    return e;
}
function openUrlInNewWindow(a, b) {
    window.open(a, b);
}
function delphiMapBoundsChangedEvent(a) {
    try {
        mapBoundsChangedEvent(a);
    } catch (b) { }
}
function delphiPlotLatlngsEvent(a) {
    try {
        plotLatlngsEvent(a);
    } catch (b) { }
}
function delphiMapMousemoveEvent(c, a) {
    try {
        mapMousemoveEvent(c, a);
    } catch (b) { }
}
function delphiMapZoomChangedEvent(b) {
    try {
        mapZoomChangedEvent(b);
    } catch (a) { }
}
function delphiMapCenterChangedEvent(c, a) {
    try {
        mapCenterChangedEvent(c, a);
    } catch (b) { }
}
function delphiMapMarkerClickEvent(a) {
    try {
        mapMarkerClickEvent(a);
    } catch (b) { }
}
function delphiMarkerCompletedEvent(c, i, k, b, h, j, a, f, d) {
    try {
        markerCompletedEvent(c, i, k, b, h, j, a, f, d);
    } catch (g) { }
}