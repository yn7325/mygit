mtd.markerClusterer = null;
mtd.TILE_404_PNG = "mapfiles\\images\\s404.png";
mtd.MAP_TYPES = [
{
    id: "GOOGLE_ROAD",
    name: "google road",
    tileUrl: "http://" + mtd.mapsever + "/vt/lyrs=m@" + mtd.GOOGLE_M_VER + "&hl=" + mtd.languageCode + "&gl=CN&src=app&x={1}&y={2}&z={3}&s=Galileo" + mtd.GOOGLE_HD_VER + mtd.STYLE_PARAMS_URL,

    locationUrl: mtd.TILE_PATH + "googlemaps\\roadmap\\{0}\\{1}\\{2}.png",
    copyright: "©2015 Google GS(2011)6020 AutoNavi"
},
{
    id: "GOOGLE_SATELLITE",
    name: "google satellite",
    tileUrl: "http://" + mtd.mapsever + "/vt/lyrs=s" + mtd.GOOGLE_S_VER + "&hl=" + mtd.languageCode + "&gl=CN&x={1}&y={2}&z={3}&s=Galileo" + mtd.GOOGLE_HD_VER,
    locationUrl: mtd.TILE_PATH + "googlemaps\\satellite\\{0}\\{1}\\{2}.jpg",
    copyright: "Imagery ©2015 Cnes/Spot Image,DigitalGlobe,GeoEye"
},
{
    id: "GOOGLE_SATELLITE_EN",
    name: "google satellite en",
    tileUrl: "http://khm{0}.google.com/kh/v=" + mtd.GOOGLE_S_VER + "&x={1}&y={2}&z={3}&s=Galileo",
    locationUrl: mtd.TILE_PATH + "googlemaps\\satellite_en\\{0}\\{1}\\{2}.jpg",
    locationOverlayUrl: mtd.TILE_PATH + "googlemaps\\overlay\\{0}\\{1}\\{2}.png",
    copyright: "Imagery ©2015 Cnes/Spot Image,DigitalGlobe,GeoEye"
},
{
    id: "GOOGLE_HYBRID",
    name: "google hybrid",
    tileUrl: "http://" + mtd.mapsever + "/vt/lyrs=s" + mtd.GOOGLE_S_VER + ",h@" + mtd.GOOGLE_H_VER + "&hl=" + mtd.languageCode + "&gl=CN&src=app&x={1}&y={2}&z={3}&s=Galileo" + mtd.GOOGLE_HD_VER + mtd.STYLE_PARAMS_URL,
    overlayTileUrl: "http://" + mtd.mapsever + "/vt/imgtp=png32&lyrs=h@" + mtd.GOOGLE_H_VER + "&hl=" + mtd.languageCode + "&gl=cn&src=app&x={1}&y={2}&z={3}&s=Galileo" + mtd.GOOGLE_HD_VER + mtd.STYLE_PARAMS_URL,
    locationUrl: mtd.TILE_PATH + "googlemaps\\hybrid\\{0}\\{1}\\{2}.jpg",
    locationOverlayUrl: mtd.TILE_PATH + "googlemaps\\overlay\\{0}\\{1}\\{2}.png",
    copyright: "Imagery ©2015 TerraMetrics, Data ©2015 GS(2011)6020 AutoNavi"
},
{
    id: "GOOGLE_TERRAIN",
    name: "google terrain",
    tileUrl: "http://" + mtd.mapsever + "/vt/lyrs=t@132,r@" + mtd.GOOGLE_M_VER + "&hl=" + mtd.languageCode + "&gl=CN&src=app&x={1}&y={2}&z={3}&s=Gali" + mtd.GOOGLE_HD_VER + mtd.STYLE_PARAMS_URL,
    locationUrl: mtd.TILE_PATH + "googlemaps\\terrain\\{0}\\{1}\\{2}.jpg",
    copyright: "Data ©2015 GS(2011)6020 AutoNavi"
},
{
    id: "GOOGLE_ROAD_NOLABEL",
    name: "GOOGLE_ROAD_NOLABEL",
    tileUrl: "http://mt{0}.google.cn/vt/lyrs=m@" + mtd.GOOGLE_M_VER + "&hl=zh-CN&gl=CN&src=app&x={1}&y={2}&z={3}&s=Galileo" + mtd.STYLEMAP_NOLABEL + mtd.GOOGLE_HD_VER,
    locationUrl: mtd.TILE_PATH + "googlemaps\\roadmap_nolabel\\{0}\\{1}\\{2}.png",
    copyright: "Data ©2015 GS(2011)6020 AutoNavi"
},
{
    id: "GOOGLE_HYBRID_NOLABEL",
    name: "google hybrid no label",
    tileUrl: "http://" + mtd.mapsever + "/vt/lyrs=s" + mtd.GOOGLE_S_VER + "&hl=" + mtd.languageCode + "&gl=cn&src=app&x={1}&y={2}&z={3}&s=Galileo" + mtd.GOOGLE_HD_VER,
    overlayTileUrl: "http://" + mtd.mapsever + "/vt/imgtp=png32&lyrs=h@" + mtd.GOOGLE_H_VER + "&hl=" + mtd.languageCode + "&gl=cn&src=app&x={1}&y={2}&z={3}&s=Galil" + mtd.STYLEMAP_NOLABEL + mtd.GOOGLE_HD_VER,
    locationUrl: mtd.TILE_PATH + "googlemaps\\satellite\\{0}\\{1}\\{2}.jpg",
    locationOverlayUrl: mtd.TILE_PATH + "googlemaps\\overlay_nolabel\\{0}\\{1}\\{2}.png",
    copyright: "Imagery ©2015 TerraMetrics, Data ©2015 GS(2011)6020 AutoNavi"
},
{
    id: "GOOGLE_TERRAIN_NOLABEL",
    name: "google terrain nolabel",
    tileUrl: "http://" + mtd.mapsever + "/vt/lyrs=t@132,r@" + mtd.GOOGLE_M_VER + "&hl=" + mtd.languageCode + "&gl=cn&src=app&x={1}&y={2}&z={3}&s=Gali" + mtd.STYLEMAP_NOLABEL + mtd.GOOGLE_HD_VER,
    locationUrl: mtd.TILE_PATH + "googlemaps\\terrain_nolabel\\{0}\\{1}\\{2}.jpg",
    copyright: "Data ©2015 GS(2011)6020 AutoNavi"
},
{
    id: "TIANDITU_ROAD",
    name: "tianditu road",
    tileUrl: "http://t{0}.tianditu.com/DataServer?T=vec_w&x={1}&y={2}&l={3}",
    overlayTileUrl: "http://t{0}.tianditu.com/DataServer?T=cva_w&x={1}&y={2}&l={3}",
    locationUrl: mtd.TILE_PATH + "tianditu\\roadmap\\{0}\\{1}\\{2}.png",
    locationOverlayUrl: mtd.TILE_PATH + "tianditu\\overlay_r\\{0}\\{1}\\{2}.png",
    copyright: "国家测绘地理信息局 - GS(2014)6032号"
},
{
    id: "TIANDITU_SATELLITE",
    name: "tianditu satellite",
    tileUrl: "http://t{0}.tianditu.com/DataServer?T=img_w&x={1}&y={2}&l={3}",
    locationUrl: mtd.TILE_PATH + "tianditu\\satellite\\{0}\\{1}\\{2}.jpg",
    copyright: "国家测绘地理信息局 - GS(2014)6032号"
},
{
    id: "TIANDITU_HYBRID",
    name: "tianditu hybrid",
    tileUrl: "http://t{0}.tianditu.com/DataServer?T=img_w&x={1}&y={2}&l={3}",
    overlayTileUrl: "http://t{0}.tianditu.com/DataServer?T=cia_w&x={1}&y={2}&l={3}",
    locationUrl: mtd.TILE_PATH + "tianditu\\satellite\\{0}\\{1}\\{2}.jpg",
    locationOverlayUrl: mtd.TILE_PATH + "tianditu\\overlay_s\\{0}\\{1}\\{2}.png",
    copyright: "国家测绘地理信息局 - GS(2014)6032号"
},
{
    id: "TIANDITU_TERRAIN",
    name: "tianditu terrain",
    tileUrl: "http://t{0}.tianditu.cn/DataServer?T=ter_w&X={1}&Y={2}&L={3}",
    overlayTileUrl: "http://t{0}.tianditu.com/DataServer?T=cta_w&X={1}&Y={2}&L={3}",
    locationUrl: mtd.TILE_PATH + "tianditu\\terrain\\{0}\\{1}\\{2}.jpg",
    locationOverlayUrl: mtd.TILE_PATH + "tianditu\\overlay_t\\{0}\\{1}\\{2}.png",
    copyright: "国家测绘地理信息局 - GS(2014)6032号"
}];
function CoordMapType(a) {
    this.tileSize = a;
}
CoordMapType.prototype.getTile = function (d, h, i) {
    var g = "Google: (" + d.x + "," + d.y + ")",
    e = "TMS: (" + d.x + "," + ((1 << h) - d.y - 1) + ")",
    c = "Bing: (" + TileToQuadKey(d.x, d.y, h) + ")",
    b = "Lng-Lat: (" + tileTolng(d.x, h) + "," + tileTolat(d.y, h) + ")",
    f = b + "<br>" + c + "<br>" + g + "<br>" + e;
    var a = i.createElement("div");
    if (mtd.isTrialVersion) {
        if ((d.x + d.y) % 4 == 0) {
            a.innerHTML = mtd.TRIAL_WATERMARK;
        }
    } else {
        a.innerHTML = f;
    }
    a.style.width = this.tileSize.width + "px";
    a.style.height = this.tileSize.height + "px";
    a.style.fontSize = (mtd.isTrialVersion) ? "13px" : "12px";
    a.style.fontWeight = (mtd.isTrialVersion) ? "bold" : "normal";
    a.style.color = (mtd.isTrialVersion) ? "#FF0080" : "#FF0080";
    a.style.borderStyle = "solid";
    if (mtd.isTrialVersion) {
        a.style.lineHeight = this.tileSize.height + "px";
    }
    a.style.borderWidth = (mtd.isTrialVersion) ? "0px 0 0 0px" : "1px 0 0 1px";
    a.style.textAlign = "center";
    return a;
};

//页面初始化
function initialize() {

    Home.mapResize();
    mtd.isMSIE = ((document.all) || (navigator.appName == "Netscape")) ? true : false;
    var a = {
        center: new google.maps.LatLng(mtd.DEFAULT_LATITUDE, mtd.DEFAULT_LONGITUDE),
        zoom: mtd.DEFAULT_ZOOM,
        mapTypeControlOptions: {
            mapTypeIds: mtd.mapTypeIds,
            style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
        },
        mapTypeControl: false,//地图类型
        scaleControl: true,//比例尺
        streetViewControl: false,

        overviewMapControl: false,
        overviewMapControlOptions: {
            opened: false
        }
        //panControlOptions: {

        //    position: google.maps.ControlPosition.TOP_RIGHT
        //},
        //zoomControlOptions: {
        //    position: google.maps.ControlPosition.TOP_RIGHT
        //}
    };
    mtd.map = new google.maps.Map(document.getElementById("map_canvas"), a);
    google.maps.event.addListener(mtd.map, "maptypeid_changed",
    function () {
        if (mtd.overlayExists) {
            removeOverlayMapType();
            mtd.overlayExists = false;
            if (mtd.coordGridExists) {
                removeOverlayMapType();
                addCoordGrid();
            }
        }
        var c = mtd.map.getMapTypeId();
        if ((c === mtd.MAP_TYPES[mtd.TDT_ROAD].id) || (c === mtd.MAP_TYPES[mtd.TDT_HYBRID].id) || (c === mtd.MAP_TYPES[mtd.TDT_TERRAIN].id) || (c === mtd.MAP_TYPES[mtd.GOOGLE_SATELLITE_EN].id)) {
            addMarkerLayersTile(c);
        }
    });
    delphiMapZoomChangedEvent(mtd.DEFAULT_ZOOM);
    google.maps.event.addListener(mtd.map, "zoom_changed",
    function () {
        var c = this.getZoom();
        delphiMapZoomChangedEvent(c);
    });
    google.maps.event.addListener(mtd.map, "bounds_changed",
    function () {
        delphiMapBoundsChangedEvent(this.getBounds().toString());
    });
    google.maps.event.addListener(mtd.map, "center_changed",
    function () {
        var c = this.getCenter();
        delphiMapCenterChangedEvent(c.lat(), c.lng());
    });
    //google.maps.event.addListener(mtd.map, "rightclick", clearAllOverlays);
    google.maps.event.addListener(mtd.map, "mousemove", listenerMousemoveEvent);
 
    var b = {
        gridSize: 60,
        maxZoom: mtd.markerClustererMaxZoom,
        imagePath: "mapfiles/images/m"
    };
    mtd.markerClusterer = new MarkerClusterer(mtd.map, [], b);
    addCustomMaps();
    if (mtd.showCoordGrid) {
        addCoordGrid();
    }
   
    mtd.markerManager = new MarkerManager(mtd.map);
    if (mtd.showCopyright) {
        loadCollections();
        window.setTimeout(function () {
            bindingCopyrightNode();
        },
        1000);
    }

    //加载树形菜单h和marker
    Home.LoadTreeAndMarker();
    //加载通知公告
    Home.GetNotice();

    ////加载地图右侧浮动窗口
    //Home.LoadMapFloatBar();
    //var barContent = "bar1content";
    //$(".barcontent:not(#" + barContent + ")").parent().slideUp(500);
    //$("#" + barContent).parent().slideDown(500);

}
function changeMapType(a) {
    mtd.map.setMapTypeId(a);
}
function bindingCopyrightNode() {
    mtd.copyrightNode = document.createElement("div");
    mtd.copyrightNode.id = "copyright-control";
    mtd.copyrightNode.style.fontSize = "11px";
    mtd.copyrightNode.style.fontFamily = "Arial, sans-serif";
    mtd.copyrightNode.style.margin = "0 0px 0px 2px";
    mtd.copyrightNode.style.whiteSpace = "nowrap";
    mtd.copyrightNode.index = 0;
    mtd.map.controls[google.maps.ControlPosition.BOTTOM_LEFT].push(mtd.copyrightNode);
    google.maps.event.addListener(mtd.map, "idle", updateCopyrights);
    google.maps.event.addListener(mtd.map, "maptypeid_changed", updateCopyrights);
}
function updateCopyrights() {
    var d = "",
    a = mtd.copyrights[mtd.map.getMapTypeId()],
    c = mtd.map.getBounds(),
    b = getCurrentZoom();
    if (a && c && b) {
        d = a.getCopyrightNotice(c, b);
    }
    mtd.copyrightNode.innerHTML = d;
}
function loadCollections() {
    var b, a;
    for (b = 0; b < mtd.MAP_TYPES.length; b++) {
        a = new CopyrightCollection(mtd.MAP_TYPES[b].copyright);
        a.addCopyright(new Copyright(3, new google.maps.LatLngBounds(new google.maps.LatLng(-90, -179), new google.maps.LatLng(90, 180)), 2, ""));
        mtd.copyrights[mtd.MAP_TYPES[b].id] = a;
    }
}
function clearAllOverlays() {
    clearShape();
    try {
        if (mtd.marker) {
            mtd.marker.setMap(null);
            mtd.marker = null;
        }
        if (mtd.infowindow) {
            mtd.infowindow.close();
        }
        while (mtd.markers[0]) {
            mtd.markers.pop().setMap(null);
        }
        mtd.markers = [];
        mtd.markerClusterer.clearMarkers();
        clearNavigationMarker();
        if (mtd.clearButton) {
            mtd.clearButton.setMap(null);
            mtd.clearButton = null;
        }
    } catch (a) { }
}

function addCoordGrid() {
    mtd.map.overlayMapTypes.insertAt(0, new CoordMapType(new google.maps.Size(mtd.TILE_SIZE, mtd.TILE_SIZE)));
    mtd.coordGridExists = true;
}
function removeCoordGrid() {
    if (mtd.overlayExists) {
        removeOverlayMapType();
    }
    if (mtd.coordGridExists) {
        removeOverlayMapType();
    }
    mtd.coordGridExists = false;
    if (mtd.overlayExists) {
        addMarkerLayersTile(mtd.map.getMapTypeId());
    }
}
function addCustomMaps() {
    var a;
    for (a = 0; a < mtd.MAP_TYPES.length; a++) {
        mtd.mapTypeIds[a] = mtd.MAP_TYPES[a].id;
        addCustomMap(a);
    }
    if (mtd.DEFAULT_MAPTYPE_INDEX >= mtd.MAP_TYPES.length) {
        mtd.DEFAULT_MAPTYPE_INDEX = mtd.DEFAULT_MAPTYPE_INDEX - 7;
    }
    mtd.map.setMapTypeId(mtd.MAP_TYPES[mtd.DEFAULT_MAPTYPE_INDEX].id);
}
function padTileCoordinate(b, a) {
    switch (Math.floor(Math.log(Math.pow(2, a)) / Math.log(10)) - Math.floor(Math.log(b) / Math.log(10))) {
        case 3:
            return "000" + b;
        case 2:
            return "00" + b;
        case 1:
            return "0" + b;
        default:
            return b;
    }
}
function isNormalizedCoord(b, a) {
    var c = (1 << a);
    if ((b.x < 0) || (b.x >= c) || (b.y < 0) || (b.y >= c)) {
        return true;
    }
    return false;
}
function addCustomMap(d) {
    if ((d < 0) || (d > mtd.MAP_TYPES.length - 1)) {
        return;
    }
    var h = 3,
    b = 18,
    g = new StringBuilder(),
    e = mtd.MAP_TYPES[d].tileUrl,
    c = "",
    f = {};
    if ((d >= mtd.GOOGLE_ROAD) && (d <= mtd.GOOGLE_TERRAIN_NOLABEL)) {
        if ((d === mtd.GOOGLE_TERRAIN) || (d === mtd.GOOGLE_TERRAIN_NOLABEL)) {
            b = 15;
        } else {
            b = 21;
        }
        f = function (j, i) {
            if (isNormalizedCoord(j, i)) {
                return null;
            }
            if (mtd.offlineMode) {
                c = g.format(mtd.MAP_TYPES[d].locationUrl, i, j.x, j.y);
            } else {
                c = g.format(e, getRandom(4), j.x, j.y, i);
            }
            return c;
        };
    } else {

        if ((d >= mtd.TDT_ROAD) && (d <= mtd.TDT_TERRAIN)) {
            f = function (j, i) {
                if (isNormalizedCoord(j, i)) {
                    return null;
                }
                if (mtd.offlineMode) {
                    c = g.format(mtd.MAP_TYPES[d].locationUrl, i, j.x, j.y);
                } else {
                    c = g.format(e, getRandom(7), j.x, j.y, i);
                }
                return c;
            }
        }

    }
    if (isGoogleHD(d)) {

        mtd.TILE_SIZE = 512;
    } else {

        mtd.TILE_SIZE = 256;
    }

    var a = new google.maps.ImageMapType({
        isPng: true,
        opacity: 1,
        minZoom: h,
        maxZoom: b,
        name: mtd.MAP_TYPES[d].name,
        tileSize: new google.maps.Size(mtd.TILE_SIZE, mtd.TILE_SIZE),
        getTileUrl: f
    });
    if (mtd.TILE_SIZE == 512) {
        a.projection = new MercatorProjection(mtd.TILE_SIZE);
    }
    mtd.map.mapTypes.set(mtd.MAP_TYPES[d].id, a);
}
function isGoogleHD(d) {
    var a = [mtd.GOOGLE_ROAD, mtd.GOOGLE_SATELLITE, mtd.GOOGLE_HYBRID, mtd.GOOGLE_TERRAIN, mtd.GOOGLE_ROAD_NOLABEL, mtd.GOOGLE_HYBRID_NOLABEL, mtd.GOOGLE_TERRAIN_NOLABEL],
    c = false,
    b = 0;
    for (b = 0; b < a.length - 1; b++) {
        if (d == a[b]) {
            c = true;
            break;
        }
    }
    return ((c) && (mtd.GOOGLE_HD_VER !== ""));
}
function _isGoogleHD(b) {
    var a = [mtd.GOOGLE_ROAD, mtd.GOOGLE_SATELLITE, mtd.GOOGLE_HYBRID, mtd.GOOGLE_TERRAIN, mtd.GOOGLE_ROAD_NOLABEL, mtd.GOOGLE_HYBRID_NOLABEL, mtd.GOOGLE_TERRAIN_NOLABEL],
    d = false,
    c = 0;
    for (c = 0; c < a.length - 1; c++) {
        if (b == mtd.MAP_TYPES[a[c]].id) {
            d = true;
            break;
        }
    }
    return ((d) && (mtd.GOOGLE_HD_VER !== ""));
}

function addMarkerLayersTile(a) {
    if (_isGoogleHD(a)) {
        mtd.TILE_SIZE = 512;
    } else {
        mtd.TILE_SIZE = 256;
    }
    var b = new google.maps.ImageMapType({
        getTileUrl: function (g, f) {
            var j = new StringBuilder(),
            e = "";
            if (a === mtd.MAP_TYPES[mtd.GOOGLE_HYBRID].id) {
                if (mtd.offlineMode) {
                    e = j.format(mtd.MAP_TYPES[mtd.GOOGLE_HYBRID].locationOverlayUrl, f, g.x, g.y);
                } else {
                    e = j.format(mtd.MAP_TYPES[mtd.GOOGLE_HYBRID].overlayTileUrl, getRandom(4), g.x, g.y, f);
                }
            } else {
                if (a === mtd.MAP_TYPES[mtd.GOOGLE_HYBRID_NOLABEL].id) {
                    if (mtd.offlineMode) {
                        e = j.format(mtd.MAP_TYPES[mtd.GOOGLE_HYBRID_NOLABEL].locationOverlayUrl, f, g.x, g.y);
                    } else {
                        e = j.format(mtd.MAP_TYPES[mtd.GOOGLE_HYBRID_NOLABEL].overlayTileUrl, getRandom(4), g.x, g.y, f);
                    }
                } else {
                    if ((a === mtd.MAP_TYPES[mtd.TDT_ROAD].id) || (a === mtd.MAP_TYPES[mtd.TDT_HYBRID].id) || (a === mtd.MAP_TYPES[mtd.TDT_TERRAIN].id) || (a == mtd.MAP_TYPES[mtd.GOOGLE_SATELLITE_EN].id) || (a === mtd.MAP_TYPES[mtd.BING_HYBRID].id)) {
                        if (a === mtd.MAP_TYPES[mtd.TDT_ROAD].id) {
                            e = j.format(mtd.MAP_TYPES[mtd.TDT_ROAD].locationOverlayUrl, f, g.x, g.y);
                        } else {
                            if (a === mtd.MAP_TYPES[mtd.TDT_HYBRID].id) {
                                e = j.format(mtd.MAP_TYPES[mtd.TDT_HYBRID].locationOverlayUrl, f, g.x, g.y);
                            } else {
                                if (a === mtd.MAP_TYPES[mtd.GOOGLE_SATELLITE_EN].id) {
                                    e = j.format(mtd.MAP_TYPES[mtd.GOOGLE_SATELLITE_EN].locationOverlayUrl, f, g.x, g.y);
                                } else {
                                    if (a === mtd.MAP_TYPES[mtd.BING_HYBRID].id) {
                                        e = j.format(mtd.MAP_TYPES[mtd.BING_HYBRID].locationOverlayUrl, f, g.x, g.y);
                                    }
                                }
                            }
                        }
                        if (!mtd.offlineMode) {
                            var c = "";
                            if (a === mtd.MAP_TYPES[mtd.TDT_ROAD].id) {
                                c = mtd.MAP_TYPES[mtd.TDT_ROAD].overlayTileUrl;
                            } else {
                                if ((a === mtd.MAP_TYPES[mtd.TDT_HYBRID].id) || (a == mtd.MAP_TYPES[mtd.GOOGLE_SATELLITE_EN].id)) {
                                    if ((a === mtd.MAP_TYPES[mtd.GOOGLE_SATELLITE_EN].id) && (f < 10)) {
                                        c = mtd.MAP_TYPES[mtd.GOOGLE_HYBRID].overlayTileUrl;
                                    } else {
                                        c = mtd.MAP_TYPES[mtd.TDT_HYBRID].overlayTileUrl;
                                    }
                                } else {
                                    if (a === mtd.MAP_TYPES[mtd.TDT_TERRAIN].id) {
                                        c = mtd.MAP_TYPES[mtd.TDT_TERRAIN].overlayTileUrl;
                                    }
                                }
                            }
                            if ((a !== mtd.MAP_TYPES[mtd.GOOGLE_SATELLITE_EN].id) ) {
                                e = j.format(c, getRandom(7), g.x, g.y, f);
                            } else {
                                e = j.format(c, getRandom(4), g.x, g.y, f);
                            }
                        }
                    }
                }
            }
            return e;
        },
        tileSize: new google.maps.Size(mtd.TILE_SIZE, mtd.TILE_SIZE),
        isPng: true
    });
    mtd.map.overlayMapTypes.insertAt((mtd.trafficTileLayerExists) ? 1 : 0, b);
    mtd.overlayExists = true;
}
function removeOverlayMapType() {
    try {
        mtd.map.overlayMapTypes.removeAt((mtd.trafficTileLayerExists) ? 1 : 0);
    } catch (a) { }
}
function setCenterAndZoom(d, c, b) {
    var a = new google.maps.LatLng(d, c);
    mtd.map.panTo(a);
    mtd.map.setZoom(b);
}
function addNewMarker(e, i, j, a, c, k, f, l, b) {
    var d = "名称：" + c + "\n地址：" + k + "\n";
    contentString = "<b>" + c + "</b><br>地址：" + k;
    if (f) {
        contentString += "<br>电话：" + f;
        d += "电话：" + f + "\n";
    }
    if (l) {
        contentString += "<br>标签：" + l;
        d += "标签：" + l + "\n";
    }
    var h = new google.maps.LatLng(i, j);
    var g = mtd.markers[e];
    if (g) {
        g.setPosition(h);
    } else {
        g = new google.maps.Marker({
            id: e,
            position: h,
            map: null,
            draggable: false,
            title: d,
            content: contentString,
            icon: "mapfiles/markers2/marker-icon.png"
        });
        mtd.markers[e] = g;
        mtd.markerClusterer.addMarker(g);
    }
    if (!mtd.infowindow) {
        mtd.infowindow = new google.maps.InfoWindow({
            maxWidth: 500
        });
    }
    mtd.infowindow.close();
    google.maps.event.addListener(g, "click",
    function () {
        mtd.infowindow.setContent(g.content);
        mtd.infowindow.open(mtd.map, g);
        delphiMapMarkerClickEvent(g.id.toString());
    });
    if (a) {
        if (mtd.map.getZoom() <= mtd.markerClustererMaxZoom) {
            mtd.map.setZoom(mtd.markerClustererMaxZoom + 1);
        }
        mtd.map.panTo(h);
        mtd.infowindow.setContent(g.content);
        mtd.infowindow.open(mtd.map, g);
    }
}
function deleteMarker(c) {
    var a = mtd.markers.length;
    var b = mtd.markers[c];
    if (b) {
        b.setMap(null);
    }
}
function addMarker(f, d, c, e) {
    var b = mtd.map.getZoom();
    if (c < b) {
        c = b;
    }
    setCenterAndZoom(f, d, c);
    if (!mtd.marker) {
        mtd.marker = createMarker();
    }
    var a = new google.maps.LatLng(f, d);
    mtd.marker.setPosition(a);
    if (e) {
        mtd.marker.setTitle(e);
    } else {
        mtd.marker.setTitle(mtd.marker.position.toUrlValue(6));
    }
    google.maps.event.addListener(mtd.marker, "dragend",
    function () {
        mtd.marker.setTitle(mtd.marker.position.toUrlValue(6));
    });
}
function getPOIMarker(c) {
    var b = 0,
    a = null;
    for (b = 0; b < mtd.pois.length; b++) {
        a = mtd.pois[b];
        if (a.id === c) {
            return a;
        }
    }
    return null;
}
function deleteAllPOIMarkers(c) {
    var b = 0,
    a = null;
    for (b = mtd.pois.length - 1; b >= 0; b--) {
        a = mtd.pois[b];
        if (a) {
            a.setMap(null);
            mtd.pois.splice(b, 1);
        }
    }
    mtd.markerManager.clearMarkers();
}
function deletePOIMarker(c) {
    var b = 0,
    a = null;
    for (b = mtd.pois.length - 1; b >= 0; b--) {
        a = mtd.pois[b];
        if ((a) && (a.id === c)) {
            mtd.markerManager.removeMarker(a);
            a.setMap(null);
            mtd.pois.splice(b, 1);
        }
    }
}
function deleteTempPOIMarkers() {
    if (mtd.tempMarkerCount === 0) {
        return;
    }
    var b = 0,
    a = null;
    for (b = mtd.pois.length - 1; b >= 0; b--) {
        a = mtd.pois[b];
        if ((a) && (a.isTemp)) {
            a.setMap(null);
            mtd.pois.splice(b, 1);
        }
    }
    mtd.tempMarkerCount = 0;
}
function getPOICount() {
    return mtd.pois.length;
}
function addPOI(e, d, k, m, j, l, c, h, b, g) {
    var n = new google.maps.LatLng(k, m),
    f = getPOIMarker(e),
    i = (f) ? false : true,
    a = "";
    if (l) {
        a = "mapfiles/icons/" + l;
    } else {
        a = "mapfiles/icons/" + mtd.defaultIconName;
    }
    if (f) {
        if (f.minZoom > 0) {
            mtd.markerManager.removeMarker(f);
        }
        f.setOptions({
            content: j,
            position: n,
            labelContent: d,
            labelVisible: g,
            title: d,
            icon: a,
            iconName: l,
            minZoom: c,
            isTemp: false
        });
        if (l) {
            mtd.defaultIconName = l;
        }
        if (c > 0) {
            mtd.markerManager.addMarker(f, c);
        } else {
            f.setMap(mtd.map);
        }
    } else {
        f = new MarkerWithLabel({
            id: e,
            position: n,
            draggable: true,
            raiseOnDrag: false,
            map: ((!h) && (c > 0)) ? null : mtd.map,
            labelContent: d,
            labelAnchor: new google.maps.Point(-12, 26),
            labelClass: "labeledMarker",
            labelVisible: g,
            icon: a,
            title: d,
            content: j,
            iconName: l,
            isTemp: h,
            minZoom: 0
        });
        mtd.pois.push(f);
        if ((!h) && (c > 0)) {
            mtd.markerManager.addMarker(f, c);
            f.minZoom = c;
        }
    }
    if (c > mtd.map.getZoom()) {
        f.setMap(null);
    }
    google.maps.event.addListener(f, "click",
    function () {
        var p = f.getPosition();
        delphiMarkerCompletedEvent(f.id.toString(), p.lat(), p.lng(), f.title, f.content, f.iconName, f.minZoom, f.isTemp, f.labelVisible);
    });
    google.maps.event.addListener(f, "dragend",
    function () {
        var p = f.getPosition();
        delphiMarkerCompletedEvent(f.id.toString(), p.lat(), p.lng(), f.title, f.content, f.iconName, f.minZoom, f.isTemp, f.labelVisible);
    });
    var o = mtd.map.getZoom();
    if (b) {
        mtd.map.setCenter(n);
        if (o < 5) {
            o = 5;
        }
        mtd.map.setZoom((o < f.minZoom) ? f.minZoom : o);
    } else {
        if ((!i) && (o < f.minZoom)) {
            mtd.map.setCenter(n);
            mtd.map.setZoom(f.minZoom);
        }
    }
    mtd.markerMinZoom = c;
}
google.maps.Map.prototype.zoomIn = function () {
    var a = this.getZoom();
    return this.setZoom(a + 1);
};
google.maps.Map.prototype.zoomOut = function () {
    var a = this.getZoom();
    return this.setZoom(a - 1);
};
if (!google.maps.Polygon.prototype.getBounds) {
    google.maps.Polygon.prototype.getBounds = function (c) {
        var b = new google.maps.LatLngBounds(),
        f = this.getPaths(),
        e,
        d,
        a;
        for (d = 0; d < f.getLength() ; d++) {
            e = f.getAt(d);
            for (a = 0; a < e.getLength() ; a++) {
                b.extend(e.getAt(a));
            }
        }
        return b;
    };
}
if (!google.maps.Polyline.prototype.getBounds) {
    google.maps.Polyline.prototype.getBounds = function (b) {
        var a = new google.maps.LatLngBounds();
        this.getPath().forEach(function (c) {
            a.extend(c);
        });
        return a;
    };
}
function computeCirclePerimeter(a) {
    return (Math.PI * 2 * a);
}
function computeCircleArea(a) {
    return (Math.PI * Math.pow(a, 2));
}
function computePolygonArea(a) {
    return google.maps.geometry.spherical.computeArea(a.getPath());
}
function computeRectangleArea(b) {
    var c = b.getBounds(),
    d = c.getNorthEast(),
    a = c.getSouthWest(),
    e = [];
    e.push(d);
    e.push(new google.maps.LatLng(a.lat(), d.lng()));
    e.push(a);
    e.push(new google.maps.LatLng(d.lat(), a.lng()));
    return google.maps.geometry.spherical.computeArea(e);
}
function showPolylineLenght(b) {
    var c = Math.round(google.maps.geometry.spherical.computeLength(b.getPath())),
    d = b.getPath().getArray(),
    a = d[d.length - 1];
    createClearButton(a, formatCalculateResult(c, false), 20, 15);
    mtd.rulerPolyline = b;
}
function createClearButton(b, c, a, e) {
    var d = new google.maps.MarkerImage("../Content/images/clear.png", new google.maps.Size(16, 16), new google.maps.Point(0, 0), new google.maps.Point(a, e));
    if (mtd.clearButton) {
        mtd.clearButton.setOptions({
            map: mtd.map,
            position: b,
            icon: d,
            labelContent: c
        });
    } else {
        mtd.clearButton = new MarkerWithLabel({
            position: b,
            map: mtd.map,
            labelContent: c,
            labelAnchor: new google.maps.Point(-4, -3),
            labelClass: "labels",
            title: "清除",
            icon: d
        });
    }
    google.maps.event.addListener(mtd.clearButton, "click",
    function () {
        clearShape();
        if (mtd.clearButton) {
            mtd.clearButton.setMap(null);
            mtd.clearButton = null;
        }
    });
}
function registerCustomPolygonClickEvent(a) {
    if (((a.type == "polygon") && (a.getPath().length <= 100)) || (a.type == "rectangle")) {
        google.maps.event.addListener(a, "click",
        function () {
            a.setEditable(!a.getEditable());
        });
    }
    if ((a.type == "polygon") || (a.type == "rectangle")) {
        google.maps.event.addListener(a, "dragend",
        function () {
            mtd.isDraggingShape = false;
        });
        google.maps.event.addListener(a, "dragstart",
        function () {
            mtd.isDraggingShape = true;
        });
    }
}
function encodePath(b) {
    var g = [],
    a = b.split(";");
    for (var d = a.length - 1; d >= 0; d--) {
        var h = a[d].split(","),
        f = h[1],
        c = h[0];
        g.push(new google.maps.LatLng(f, c));
    }
    var e = google.maps.geometry.encoding.encodePath(g);
    setJsReturnValue(e);
    return decode_Path;
}
function decodePath(a) {
    var c = google.maps.geometry.encoding.decodePath(a);
    var b = c.toString();
    setJsReturnValue(b);
    return b;
}
function showBoundary(h) {
    var n = google.maps.geometry.encoding.decodePath(h);
    var k = (n.length === 2);
    if (k) {
        var f, g, c, e;
        f = Math.max(n[0].lat(), n[1].lat());
        g = Math.max(n[0].lng(), n[1].lng());
        c = Math.min(n[0].lat(), n[1].lat());
        e = Math.min(n[0].lng(), n[1].lng());
    }
    clearShape();
    if (k) {
        var l = new google.maps.LatLng(c, e),
        d = new google.maps.LatLng(f, g);
        mtd.customPolygon = new google.maps.Rectangle();
        mtd.customPolygon.type = "rectangle";
        mtd.customPolygon.setBounds(new google.maps.LatLngBounds(l, d));
        google.maps.event.addListener(mtd.customPolygon, "bounds_changed",
        function () {
            rectangleToElement(mtd.customPolygon);
        });
    } else {
        mtd.customPolygon = new google.maps.Polygon();
        mtd.customPolygon.setPaths(n);
        mtd.customPolygon.type = "polygon";
        google.maps.event.addListener(mtd.customPolygon.getPath(), "set_at",
        function () {
            polygonToElement(mtd.customPolygon);
        });
        google.maps.event.addListener(mtd.customPolygon.getPath(), "insert_at",
        function () {
            polygonToElement(mtd.customPolygon);
        });
    }
    mtd.customPolygon.setOptions(mtd.polyOptions);
    if (n.length < 20) {
        mtd.customPolygon.setEditable(true);
    } else {
        mtd.customPolygon.setEditable(false);
    }
    mtd.customPolygon.setMap(mtd.map);
    var j = 0;
    if (k) {
        j = computeRectangleArea(mtd.customPolygon);
    } else {
        j = google.maps.geometry.spherical.computeArea(mtd.customPolygon.getPath());
    }
    var b = mtd.customPolygon.getBounds();
    var a = b.getCenter();
    mtd.map.fitBounds(b);
    if (mtd.showAreaLabel) {
        var m = Math.round(google.maps.geometry.spherical.computeLength(n));
        var i = formatCalculateResult(m, false).replace("总长度", " 周长");
        createClearButton(n[0], formatCalculateResult(j, true) + i, 0, 0);
    }
    google.maps.event.addListener(mtd.customPolygon, "mousemove", listenerMousemoveEvent);
    if (k) {
        rectangleToElement(mtd.customPolygon);
    } else {
        polygonToElement(mtd.customPolygon);
    }
    return true;
}
function getCoordinates(g) {
    var e = 60,
    c = 360 / e,
    f = 0,
    b = g.getCenter(),
    a = g.getRadius() / 1000,
    h = [],
    d;
    for (d = 0; d < e - 1; d++) {
        h[d] = b.destinationPoint(f, a);
        f += c;
    }
    return h;
}
Number.prototype.toRad = function () {
    return this * Math.PI / 180;
};
Number.prototype.toDeg = function () {
    return this * 180 / Math.PI;
};
google.maps.LatLng.prototype.destinationPoint = function (a, f) {
    f = f / 6371;
    a = a.toRad();
    var e = this.lat().toRad(),
    c = this.lng().toRad(),
    d = Math.asin(Math.sin(e) * Math.cos(f) + Math.cos(e) * Math.sin(f) * Math.cos(a)),
    b = c + Math.atan2(Math.sin(a) * Math.sin(f) * Math.cos(e), Math.cos(f) - Math.sin(e) * Math.sin(d));
    if (isNaN(d) || isNaN(b)) {
        return null;
    }
    return new google.maps.LatLng(d.toDeg(), b.toDeg());
};
function circleToElement(b) {
    var k = 60,
    j = 360 / k,
    d = 0,
    a = b.getCenter(),
    g = b.getRadius() / 1000,
    h = new StringBuilder(),
    c = null,
    e;
    for (e = k - 1; e >= 0; e--) {
        c = a.destinationPoint(d, g);
        h.append(c.lng().toFixed(5));
        h.append(",");
        h.append(c.lat().toFixed(5));
        if (e != 0) {
            h.append(",");
        }
        d += j;
    }
    if (mtd.showAreaLabel) {
        var f = formatCalculateResult(computeCirclePerimeter(g * 1000), false).replace("总长度", " 周长");
        createClearButton(a, formatCalculateResult(computeCircleArea(g * 1000), true) + f, 20, 15);
    }
    mtd.customPolygon = b;
    mtd.customPolygon.type = "circle";
    delphiPlotLatlngsEvent(h.toString());
}
function rectangleToElement(d) {
    var f = d.getBounds().getNorthEast(),
    b = d.getBounds().getSouthWest(),
    a = f.lng().toFixed(5) + "," + f.lat().toFixed(5) + "," + b.lng().toFixed(5) + "," + b.lat().toFixed(5);
    var g = [];
    g.push(f);
    g.push(new google.maps.LatLng(b.lat(), f.lng()));
    g.push(b);
    g.push(new google.maps.LatLng(f.lat(), b.lng()));
    if (mtd.showAreaLabel) {
        var c = Math.round(google.maps.geometry.spherical.computeLength(g));
        var e = formatCalculateResult(c, false).replace("总长度", " 周长");
        createClearButton(f, formatCalculateResult(computeRectangleArea(d), true) + e, -5, 16);
    }
    mtd.customPolygon = d;
    mtd.customPolygon.type = "rectangle";
    delphiPlotLatlngsEvent(a);
}
function polygonToElement(d) {
    var g = new StringBuilder(),
    e = d.getPath().getArray(),
    a = e.length,
    c;
    for (c = a - 1; c >= 0; c--) {
        g.append(e[c].lng().toFixed(5));
        g.append(",");
        g.append(e[c].lat().toFixed(5));
        if (c != 0) {
            g.append(",");
        }
    }
    if (mtd.showAreaLabel) {
        var b = Math.round(google.maps.geometry.spherical.computeLength(d.getPath()));
        var f = formatCalculateResult(b, false).replace("总长度", " 周长");
        createClearButton(e[a - 1], formatCalculateResult(computePolygonArea(d), true) + f, 20, 15);
    }
    mtd.customPolygon = d;
    mtd.customPolygon.type = "polygon";
    delphiPlotLatlngsEvent(g.toString());
}
function listenerMousemoveEvent(c) {
    var b = c.latLng.lat(),
    a = c.latLng.lng();
    delphiMapMousemoveEvent(b, a);
}
function clearShape() {
    try {
        if (mtd.customPolygon) {
            mtd.customPolygon.setMap(null);
            mtd.customPolygon = null;
        }
        if (mtd.rulerPolyline) {
            mtd.rulerPolyline.setMap(null);
            mtd.rulerPolyline = null;
        }
    } catch (a) { }
}

function getCurrentZoom() {
    return mtd.currentZoom;
}
function setCurrentZoom(a) {
    mtd.currentZoom = a;
}
function createMarker() {
    return new google.maps.Marker({
        map: mtd.map,
        draggable: true,
        icon: "mapfiles/markers2/red-dot.png"
    });
}

/************************************分割线 以下部分为自己添加方法***************************************/
var Home = {};


//绘制边框(全能地图导出边界线)
Home.DrawNJBound = function () {
    clearShape();
    // var trianglecount = jsbound.count;
    var boudarr = mtd.njboud.coordinates;

    var rslength = mtd.njboud.coordinates.length;;
    var triangleCoords = [];
    for (i = 0; i < rslength; i++) {

        var postion = boudarr[i];
        var lng = parseFloat(postion[0]);//经度
        var lat = parseFloat(postion[1]);//纬度

        // 加入经纬度
        triangleCoords.push(new google.maps.LatLng(lat, lng));

    }
    mtd.customPolygon = new google.maps.Polygon({
        paths: triangleCoords,
        strokeColor: "#FF0080",
        fillColor: "#FF00FF",
        strokeOpacity: 0.95,
        strokeWeight: 2,
        fillOpacity: 0.0
    });
    polygonToElementself(mtd.customPolygon);
    mtd.customPolygon.setMap(mtd.map);

};
function polygonToElementself(d) {
    // var g = new StringBuilder(),
    e = d.getPath().getArray(),
    a = e.length;
    //c;
    //for (c = a - 1; c >= 0; c--) {
    //    g.append(e[c].lng().toFixed(5));
    //    g.append(",");
    //    g.append(e[c].lat().toFixed(5));
    //    if (c != 0) {
    //        g.append(",");
    //    }
    //}
    if (mtd.showAreaLabel) {
        //var b = Math.round(google.maps.geometry.spherical.computeLength(d.getPath()));
        // var f = formatCalculateResult(b, false).replace("总长度", " 周长");
        createClearButtonself(e[a - 1], 20, 15);
    }
    mtd.customPolygon = d;
    mtd.customPolygon.type = "polygon";
    //delphiPlotLatlngsEvent(g.toString());
}
function createClearButtonself(b, a, e) {
    var d = new google.maps.MarkerImage("../Content/images/clear.png", new google.maps.Size(16, 16), new google.maps.Point(0, 0), new google.maps.Point(a, e));
    if (mtd.clearButton) {
        mtd.clearButton.setOptions({
            map: mtd.map,
            position: b,
            icon: d,
            labelContent: ""
        });
    } else {
        mtd.clearButton = new MarkerWithLabel({
            position: b,
            map: mtd.map,
            labelContent: "",
            labelAnchor: new google.maps.Point(-4, -3),
            labelClass: "labels",
            title: "清除",
            icon: d
        });
    }
    google.maps.event.addListener(mtd.clearButton, "click",
    function () {
        clearShape();
        if (mtd.clearButton) {
            mtd.clearButton.setMap(null);
            mtd.clearButton = null;
        }
    });
}

//清除图上maker ，初始化地图弹框
Home.Ready = function () {
    if (!mtd.infowindow) {
        //mtd.infowindow = new google.maps.InfoWindow({
        //    maxWidth: 401
        //    //pixelOffset: new google.maps.Size(0, -28)
        //});

        var boxText = document.createElement("div");
        boxText.style.cssText = "";
        boxText.innerHTML = "";
        var xoffset = -150;
        var yoffset = -290;

        var myOptions = {
            content: boxText
            , disableAutoPan: false
            , maxWidth: 368
            , pixelOffset: new google.maps.Size(xoffset, yoffset)
            , zIndex: null
            , boxStyle: {
                background: ""
              , opacity: 1
              , width: "368px"
            }
            , closeBoxMargin: "0px 30px 0px 2px"
            , closeBoxURL: "../Content/images/maptip/shut.png"
            , infoBoxClearance: new google.maps.Size(1, 1)
            , isHidden: false
            , pane: "floatPane"
            , enableEventPropagation: false
        };

        //google.maps.event.addListener(marker, "click", function (e) {
        //    ib.open(theMap, this);
        //});

        //自定义Infowindow 需先引入infobox.js 
        mtd.infowindow = new InfoBox(myOptions);
        // ib.open(theMap, marker);

    }

    while (mtd.zhdmarkers[0]) {
        mtd.zhdmarkers.pop().setMap(null);
    }
    mtd.zhdmarkers = [];

    while (mtd.jcdmarkers[0]) {
        mtd.jcdmarkers.pop().setMap(null);
    }
    mtd.jcdmarkers = [];
};

//改变地图类型
Home.ChangeType = function (maptypeid) {

    mtd.map.setMapTypeId(mtd.MAP_TYPES[maptypeid].id);

}

//加载左侧树形菜单
Home.LoadTreeAndMarker = function () {
    Home.Ready();
    $.ajax({
        type: 'GET',
        url: '../Home/LoadTreeAndMarker',
        async: true,
        cache: false,    
        success: function (result) {
            //行政区划树绑定
        	var data1= eval("(" + result + ")");
            $('#xzqhtree').tree({
                data: data1["xzqhtree"],
                onSelect: function (node) {
                    if (node) {
                        //定位省
                        if (node.level == 1) {

                            Home.GotoPostion(node.x, node.y, node.fixLevel);
                        }
                            //定位市
                        else if (node.level == 2) {
                            Home.GotoPostion(node.x, node.y, node.fixLevel);
                        }
                            //定位县
                        else if (node.level == 3) {
                            Home.GotoPostion(node.x, node.y, node.fixLevel);
                        }
                            //定位灾害点
                        else if (node.level == 4) {
                            Home.GotoZHDPoint(node.id, node.FixLevel);
                        }
                            //定位监测点
                        else if (node.level == 5) {
                            Home.GotoJCDPoint(node.id, node.FixLevel);
                        }
                    }
                }

            });

            //仪器类型树绑定
            $('#eqtypetree').tree({
                data: data1["xzqhtree"],
                onSelect: function (node) {
                    if (node) {

                        //仪器类型，选中之后无操作
                        if (node.level == 0) {
                            return;
                        }
                        //定位省
                        if (node.level == 1) {

                            Home.GotoPostion(node.x, node.y, node.fixLevel);
                        }
                            //定位市
                        else if (node.level == 2)
                        { Home.GotoPostion(node.x, node.y, node.fixLevel); }
                            //定位县
                        else if (node.level == 3)
                        { Home.GotoPostion(node.x, node.y, node.fixLevel); }
                            //定位灾害点
                        else if (node.level == 4) {
                            Home.GotoZHDPoint(node.id, node.FixLevel);
                        }
                            //定位监测点
                        else if (node.level == 5) {
                            Home.GotoJCDPoint(node.id, node.FixLevel);
                        }
                    }
                }
            });

            //绘制灾害点marker
         //   Home.LoadZHDMarker(result.zhdmarker);
            //绘制监测点marker
          //  Home.LoadJCDMarker(result.jcdmarker);
        }
    });
    Home.DrawNJBound();

    Home.LoadMapFloatBar();
};

//加载灾害点marker
Home.LoadZHDMarker = function (result) {

    $.each(result, function (i, v) {

        if (v.x != "" && v.y != "") {

            var icon = "../Content/images/icons/" + v.markerico;

            //  var spcode =String(v.pcode);
            //alert(spcode);
            //标注中心坐标
            var _latlng = new google.maps.LatLng(v.y, v.x);
            //var _gmarker = new google.maps.Marker({
            //    id: i,
            //    position: _latlng,
            //    map: mtd.map,
            //    icon: icon,
            //    title: v.zname,
            //    tybh: v.tybh,
            //    e_x: v.x,
            //    e_y: v.y,
            //    guimo: v.guimo,
            //    address: v.address
            //});
            //带标签的marker
            var _gmarker = new MarkerWithLabel({
                id: i,
                position: _latlng,
                map: mtd.map,
                icon: icon,
                labelContent: v.zname,
                labelAnchor: new google.maps.Point(-12, 20),
                labelClass: "labeledMarker",
                minZoom: 5,
                title: v.zname,
                tybh: v.tybh,
                e_x: v.x,
                e_y: v.y,
                guimo: v.guimo,
                address: v.address,
                runstate: v.runstate,
                warningstate: v.warningstate,
                jcdcount: v.jcdcount,
                eqcount: v.eqcount

            });


            mtd.zhdmarkers.push(_gmarker);
            var fn = ZHDmarkerClickFunction(v, _latlng, _gmarker);
            google.maps.event.addListener(_gmarker, 'click', fn);
        }
    });
};

//加载监测点marker
Home.LoadJCDMarker = function (result) {

    $.each(result, function (i, v) {

        if (v.x != "" && v.y != "") {

            var icon = "../Content/images/icons/" + v.markerico;

            //标注中心坐标
            var _latlng = new google.maps.LatLng(v.y, v.x);
            var _gmarker = new google.maps.Marker({
                id: i,
                position: _latlng,
                map: mtd.map,
                icon: icon,
                title: v.jcdname,
                tybh: v.tybh,
                jcdbh: v.jcdbh,
                fullname: v.fullname,
                simid: v.simid,
                e_x: v.x,
                e_y: v.y,
                address: v.address,
                runstate: v.runstate,
                warningstate: v.warningstate,
                eqcount: v.eqcount
            });
            mtd.jcdmarkers.push(_gmarker);
            var fn = JCDmarkerClickFunction(v, _latlng, _gmarker);
            google.maps.event.addListener(_gmarker, 'click', fn);
        }
    });
};

//灾害点marker单击事件
function ZHDmarkerClickFunction(value, latLng, marker) {

    return function (e) {
        //图上点击触发
        if (e != null) {
            e.cancelBubble = true;
            e.returnValue = false;
            if (e.stopPropagation) {
                e.stopPropagation();
                e.preventDefault();
            }
            mtd.currentmark = marker;

        } else {
            mtd.currentmark = marker;
            mtd.map.setCenter(latLng); //以当前点为中心

        }
        //打开窗口时触发获取当前灾害点的运行状态和报警状态信息    
        //  if (marker.runstate == null && marker.warningstate == null) {
        var runstate = "";
        var warningstate = "";
        var quanjing = "N";
        $.ajax({
            type: 'GET',
            url: '/Home/GetZHDState',
            async: false,
            cache: false,
            data: { tybh: marker.tybh },
            dataType: "json",
            success: function (result) {
                runstate = result.runstate;
                warningstate = result.warningstate;
                quanjing = result.quanjing;
            }
        });
        marker.runstate = runstate;
        marker.warningstate = warningstate;
        // }

        var infoHtml = "<div class='tip'><div class='tiptitle'> <div class='titlename' >" + marker.title + "</div></div><div class='tipcon'><div class='cn1'><div class='cn1left'><span>监 测 点：</span>" + marker.jcdcount + " </div> <div class='cn1right'><span>监测仪器：</span>" + marker.eqcount + "</div></div> <div class='cn2'><span>地理位置：</span>" + marker.address + "</div><div class='runstate'><div class='cn3'><span>运行状态：</span>" + marker.runstate + "</div> <div class='cn3'><span>报警状态：</span>" + marker.warningstate + "</div> </div> </div> <div class='tipico'> <ul> <li><img src='/Content/images/maptip/qj.png'>";
        if (quanjing == "Y") {
            infoHtml = infoHtml + "<a href='javascript:void(0);' onclick='quanjingshow(&quot;" + marker.tybh + "&quot;)'>全景展示</a></li> ";
        } else {
            infoHtml = infoHtml + "<a href='#' style='color:#9CA0A1' >全景展示</a></li> ";
        }
        infoHtml = infoHtml + "<li>   <img src='/Content/images/maptip/detail.png'><a  href='javascript:void(0);' onclick='jczh(&quot;" + marker.tybh + "&quot;)'>监测值守</a></li><li> <img src='/Content/images/maptip/zhdinfo.png'><a href='/Disaster/DZGK?tybh=" + marker.tybh + "'  target='view_window' >地灾概况</a></li><li><img src='/Content/images/maptip/warn.png'><a  href='javascript:void(0);' onclick='zhdwarnrecord(&quot;" + marker.tybh + "&quot;)' >报警记录</a></li>  </ul></div></div>";

        mtd.infowindow.setContent(infoHtml);
        mtd.infowindow.open(mtd.map, mtd.currentmark);
        delphiMapMarkerClickEvent(mtd.currentmark.id.toString());
    };
}
//全景展示
function quanjingshow(tybh) {
    //alert("全景展示");
    var index = layer.open({
        title: '全景展示',
        type: 2,
        area: ['1340px', '670px'],
        maxmin: true,
        content: ['/UploadFile/quanjing/' + tybh + '/index.html?zhdbh=' + tybh, 'no'], maxmin: true,
    });
};
//监测值守
function jczh(tybh) {

    window.open("/JCZH/Index?tybh=" + tybh);
};


//地灾概况
function zaidianinfo(tybh)
{
    //alert("地灾概况");
    //   href="/PointList/ShowDzgk?src=' + row.TYBH + '" target="_blank"
    
};
//地灾详情
function dizaidetail(tybh,zname) {
    //var index = layer.open({
    //    title: '地灾详情' + "-" + zname,
    //    type: 2,
    //    area: ['960px', '650px'],
    //    skin: 'layui-layer-rim', //加上边框
    //    content: ['/PointList/ShowDzxq?TYBH=' + tybh], maxmin: true,
    //});

    layer_show('地灾详情' + "-" + zname, "/Disaster/Detail?TYBH=" + tybh, '960', '650');
};
//灾害点报警记录
function zhdwarnrecord(tybh) {
    //   alert("灾害点报警记录");
    layer_show('报警记录', "/Warning/RecordList?tybh=" + tybh, '960', '670');
};



//监测点marker单击事件
function JCDmarkerClickFunction(value, latLng, marker) {

    return function (e) {
        //图上点击触发
        if (e != null) {
            e.cancelBubble = true;
            e.returnValue = false;
            if (e.stopPropagation) {
                e.stopPropagation();
                e.preventDefault();
            }
            mtd.currentmark = marker;

        } else {
            mtd.currentmark = marker;
            mtd.map.setCenter(latLng); //以当前点为中心
        }
        //打开窗口时触发获取当前灾害点的运行状态和报警状态信息    
        //if (marker.runstate == null && marker.warningstate == null) {
        var runstate = "";
        var warningstate = "";
        var hasVideo = "N";
        var hasEQ = "N"; ;
        var vedioLink = "";
        $.ajax({
            type: 'GET',
            url: '/Home/GetJCDState',
            async: false,
            cache: false,
            data: { jcdbh: marker.jcdbh },
            dataType: "json",
            success: function (result) {
                runstate = result.runstate;
                warningstate = result.warningstate;
                hasVideo = result.hasVideo;
                vedioLink = result.vedioLink;
                hasEQ = result.hasEQ;
            }
        });
        marker.runstate = runstate;
        marker.warningstate = warningstate;
        // }

        var infoHtml = "<div class='tip'><div class='tiptitle'> <div class='titlename' >" + marker.title + "</div></div><div class='tipcon'><div class='cn1'><div class='cn1left'><span>监测仪器：</span>" + marker.eqcount + " </div> <div class='cn1right'><span>SIM卡号：</span>" + marker.simid + "</div></div> <div class='cn2'><span>地理位置：</span>" + marker.address + "</div><div class='runstate'><div class='cn3'><span>运行状态：</span>" + marker.runstate + "</div> <div class='cn3'><span>报警状态：</span>" + marker.warningstate + "</div> </div> </div> <div class='tipico'> <ul> <li><img src='/Content/images/maptip/shipin.png'>";
        if (hasVideo == "Y") {
            infoHtml = infoHtml + "<a href='javascript:void(0);' onclick='shipinjiankong(&quot;" + vedioLink + "&quot;)'>视频监控</a></li> ";
        } else {
            infoHtml = infoHtml + "<a href='#' style='color:#9CA0A1' >视频监控</a></li> ";
        }
        if (hasEQ == "Y") {
            infoHtml = infoHtml + "<li> <img src='/Content/images/maptip/detail.png'><a  href='javascript:void(0);' onclick='jcdinfo(&quot;" + marker.jcdbh + "&quot;,&quot;" + marker.tybh + "&quot;,&quot;" + marker.title + "&quot;)'>站点信息</a></li> <li>  <img src='/Content/images/maptip/eq.png'><a  href='javascript:void(0);' onclick='eqinfo(&quot;" + marker.jcdbh + "&quot;,&quot;" + marker.title + "&quot;)' >仪器设备</a></li><li><img src='/Content/images/maptip/quxian.png'><a  href='javascript:void(0);' onclick='shujuquxian(&quot;" + marker.jcdbh + "&quot;,&quot;" + marker.tybh + "&quot;,&quot;" + marker.fullname + "&quot;)' >数据曲线</a></li>  </ul></div></div>";
            //infoHtml = infoHtml + "<li> <img src='/Content/images/maptip/detail.png'><a  href='javascript:void(0);' onclick='jcdinfo(&quot;" + marker.jcdbh + "&quot;,&quot;" + marker.tybh + "&quot;,&quot;" + marker.title + "&quot;)'>站点信息</a></li> <li>  <img src='/Content/images/maptip/eq.png'><a  href='/Sensor/Index?jcdbh=" + marker.jcdbh + "'  target='view_window'>仪器设备</a></li><li><img src='/Content/images/maptip/quxian.png'><a  href='javascript:void(0);' onclick='shujuquxian(&quot;" + marker.jcdbh + "&quot;,&quot;" + marker.tybh + "&quot;,&quot;" + marker.fullname + "&quot;)' >数据曲线</a></li>  </ul></div></div>";
        } else {
            infoHtml = infoHtml + "<li> <img src='/Content/images/maptip/detail.png'><a  href='#' style='color:#9CA0A1'>站点信息</a></li> <li>  <img src='/Content/images/maptip/eq.png'><a  href='#' style='color:#9CA0A1' >仪器设备</a></li><li><img src='/Content/images/maptip/quxian.png'><a href='#' style='color:#9CA0A1' >数据曲线</a></li>  </ul></div></div>";
        }

        mtd.infowindow.setContent(infoHtml);
        mtd.infowindow.open(mtd.map, mtd.currentmark);
        delphiMapMarkerClickEvent(mtd.currentmark.id.toString());
    };
}
//视屏监控
function shipinjiankong(link) {
    window.open(link, "", "")
};
//站点信息
function jcdinfo(jcdbh,tybh,jcdname) {
   // alert("站点信息");
    layer_show(jcdname, "/Monit/Detail?JCDBH=" + jcdbh + "&zhdbh=" + tybh, '1040', '630');
    
};
//仪器设备
function eqinfo(jcdbh,jcdname) {
    //alert("仪器设备");
    //layer_show(jcdname, "/Sensor/Index?jcdbh=" + jcdbh, '1040', '630');
   // window.location = "/Sensor/Index?jcdbh=" + jcdbh;
    layer_show(jcdname, "/Sensor/EQList?jcdbh=" + jcdbh, '1040', '500');
};
//数据曲线
function shujuquxian(jcdbh, tybh, fullname) {
    layer_show(fullname, "/Sensor/JCDEQDataDetail?jcdbh=" + jcdbh + "&zhdbh=" + tybh, '1040', '630');
};



//加载地图右侧漂浮的数据区
Home.LoadMapFloatBar = function () {
    $.ajax({
        type: 'GET',
        url: '../Home/LoadMapFloatBar',
        async: true,
        cache: false,
        success: function (result) {
        	var data1= eval("(" + result + ")");
            if (data1["stype"]) {
                $("#bar1content").html(data1["stype"]);
            }
            if (data1["status"]) {
                $("#bar2content").html(data1["status"]);
            }
            if (data1["warning"]) {
                $("#bar3content").html(data1["warning"]);
            }
        }
    });

};

//尺寸变化适应窗口
Home.mapResize = function () {
    $(".tree_canvas").height($(document).height() - 365);
    $(".tabCon").height($(document).height() - 365 - 31 - 5);
};
//锁定位置
Home.GotoPostion = function (x, y, fixlevel) {

    //关闭地图弹框
    mtd.infowindow.close();
    var latLng = new google.maps.LatLng(y, x);
    var fl = Number(fixlevel);
    mtd.map.setCenter(latLng); //以当前点为中心

    //mtd.map.setZoom(fixlevel);
    mtd.map.setZoom(fl);
};

//定位灾害点，并且打开灾害点地图提示框
Home.GotoZHDPoint = function (nodeid, fixlevel) {
    var isexist = false;
    // isexist = true;
    for (var i = 0; i < mtd.zhdmarkers.length; i++) {

        if (mtd.zhdmarkers[i].tybh === nodeid) {

            google.maps.event.trigger(mtd.zhdmarkers[i], 'click');
            mtd.map.setZoom(Number(fixlevel));
            isexist = true;
            break;
        }
    }
    if (!isexist) {
        alert("此灾害点无经纬度信息,");
        //swal({
        //    title: "此设备暂无经纬度信息，无法定位!",
        //    text: "",
        //    type: "warning",
        //    showCancelButton: false,
        //    confirmButtonColor: '#DD6B55',
        //    closeOnConfirm: true
        //    //closeOnCancel: false
        //});
    }
};
//定位监测点，并且打开监测点地图提示框
Home.GotoJCDPoint = function (nodeid, fixlevel) {
    var isexist = false;
    // isexist = true;
    for (var i = 0; i < mtd.jcdmarkers.length; i++) {

        if (mtd.jcdmarkers[i].jcdbh === nodeid) {

            google.maps.event.trigger(mtd.jcdmarkers[i], 'click');

            mtd.map.setZoom(Number(fixlevel));
            isexist = true;
            break;
        }
    }
    if (!isexist) {
        alert("此监测点无经纬度信息,");
        //swal({
        //    title: "此设备暂无经纬度信息，无法定位!",
        //    text: "",
        //    type: "warning",
        //    showCancelButton: false,
        //    confirmButtonColor: '#DD6B55',
        //    closeOnConfirm: true
        //    //closeOnCancel: false
        //});
    }
};
//tab树形菜单切换
Home.Tab = function (tabBar, tabCon, class_name, tabEvent, i) {
    var $tab_menu = $(tabBar);
    // 初始化操作
    $tab_menu.removeClass(class_name);
    $(tabBar).eq(i).addClass(class_name);
    $(tabCon).hide();
    $(tabCon).eq(i).show();

    $tab_menu.on(tabEvent, function () {
        $tab_menu.removeClass(class_name);
        $(this).addClass(class_name);
        var index = $tab_menu.index(this);
        $(tabCon).hide();
        $(tabCon).eq(index).show();
    });
};

//获取通知公告
Home.GetNotice = function () {
    $.ajax({
        type: 'GET',
        url: '../Home/GetNotice',
        async: true,
        cache: false,
        success: function (result) {
            if (result.listcount > 0) {
                $('#notice').html('');
                $.each(result.data, function (i, v) {

                    $('#notice').append("<li title=\"\"><a href='/Notice/NoticeDetail?id=" + v.ID + "' target='" + i + "' title='" + v.ATitle + "' >" + v.ATitle + "</a> <span>[" + v.Atime + "]</span></li>");
                });
            }
        }
    });
};


//（Unix时间戳）转成我们想要的时间格式。
function getTime(/** timestamp=0 **/) {
    var ts = arguments[0] || 0;
    var t, y, m, d, h, i, s;
    t = ts ? new Date(ts * 1000) : new Date();
    y = t.getFullYear();
    m = t.getMonth() + 1;
    d = t.getDate();
    h = t.getHours();
    i = t.getMinutes();
    s = t.getSeconds();
    // 可根据需要在这里定义时间格式  
    return y + '-' + (m < 10 ? '0' + m : m) + '-' + (d < 10 ? '0' + d : d) + ' ' + (h < 10 ? '0' + h : h) + ':' + (i < 10 ? '0' + i : i) + ':' + (s < 10 ? '0' + s : s);
}
function CurentTime() {
    var now = new Date();

    var year = now.getFullYear();       //年
    var month = now.getMonth() + 1;     //月
    var day = now.getDate();            //日

    var hh = now.getHours();            //时
    var mm = now.getMinutes();          //分

    var clock = year + "-";

    if (month < 10)
        clock += "0";

    clock += month + "-";

    if (day < 10)
        clock += "0";

    clock += day;

    //if (hh < 10)
    //    clock += "0";

    //clock += hh + ":";
    //if (mm < 10) clock += '0';
    //clock += mm;
    return (clock);
};
function CurentPreTime() {


    var dt = new Date();
    var y = (dt.getMonth() == 0) ? (dt.getFullYear() - 1) : dt.getFullYear();
    var m = (dt.getMonth() == 0) ? 11 : dt.getMonth() - 1;
    var preM = getDayOfMonth(y, m);
    var d = (preM < dt.getDate()) ? preM : dt.getDate();
    // return new Date(y, m, d);  


    var now = new Date(y, m, d)

    var year = now.getFullYear();       //年
    var month = now.getMonth() + 1;     //月
    var day = now.getDate();            //日

    var hh = dt.getHours();            //时
    var mm = dt.getMinutes();          //分

    var clock = year + "-";

    if (month < 10)
        clock += "0";

    clock += month + "-";

    if (day < 10)
        clock += "0";

    clock += day;

    //if (hh < 10)
    //    clock += "0";

    //clock += hh + ":";
    //if (mm < 10) clock += '0';
    //clock += mm;
    return (clock);
};
function getDayOfMonth(y, Mm) {
    /// <summary>  
    /// 计算当前月一共多少天  
    ///create by 长江 20121225  
    /// </summary>  
    /// <returns type="Number" />  
    /// <param name="y" type="Number">  
    ///     年,若为空则为当前时间  
    /// </param>  
    /// <param name="Mm" type="Number">  
    ///     月,0开始,若为空则为当前时间  
    /// </param>  
    if (typeof y == 'undefined') { y = (new Date()).getFullYear(); }
    if (typeof Mm == 'undefined') { Mm = (new Date()).getMonth(); }
    var Feb = (y % 4 == 0) ? 29 : 28;
    var aM = new Array(31, Feb, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
    return aM[Mm];
};
function getDateOfNextMonth(dt) {

    if (typeof dt == 'undefined') { dt = (new Date()); }
    var y = (dt.getMonth() == 11) ? (dt.getFullYear() + 1) : dt.getFullYear();
    var m = (dt.getMonth() == 11) ? 0 : dt.getMonth() + 1;
    var preM = Date.getDayOfMonth(y, m);
    var d = (preM < dt.getDate()) ? preM : dt.getDate();
    return new Date(y, m, d);
};
function getBeforeDate(n) {
    var n = n;
    var d = new Date();
    var year = d.getFullYear();
    var mon = d.getMonth() + 1;
    var day = d.getDate();
    if (day <= n) {
        if (mon > 1) {
            mon = mon - 1;
        }
        else {
            year = year - 1;
            mon = 12;
        }
    }
    d.setDate(d.getDate() - n);
    year = d.getFullYear();
    mon = d.getMonth() + 1;
    day = d.getDate();
    s = year + "-" + (mon < 10 ? ('0' + mon) : mon) + "-" + (day < 10 ? ('0' + day) : day);
    return s;
};
